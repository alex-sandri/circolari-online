rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /circolari/{circolareId} {
      allow read: if true;

      allow create: if allowOnly([ "title", "description", "fields", "metadata" ])
        && isValidTitle(incomingData().title)
        && isValidDescription(incomingData().description)
        && incomingData().fields is list
        && incomingData().fields.size() > 0
        && incomingData().metadata is map
        && incomingData().metadata.createdAt == request.time
        && incomingData().metadata.owner == request.auth.uid;

      allow update: if incomingData().metadata.owner == request.auth.uid
        && incomingData().diff(existingData()).affectedKeys().hasOnly([ "title", "description" "settings" ])
        && isValidTitle(incomingData().title)
        && isValidDescription(incomingData().description);

      allow delete: if false;

      function isValidTitle(title) {
        return title is string
        && title.size() > 0;
      }

      function isValidDescription(description) {
        return .description is string;
      }

      match /answers/{answerId} {
        allow read: if get(/databases/$(database)/documents/circolari/$(circolareId)).data.metadata.owner == request.auth.uid;

        allow create: if incomingData().fields.size() == get(/databases/$(database)/documents/circolari/$(circolareId)).data.fields.size()
          && incomingData().metadata.sent == request.time
          && allowNewAnswers();

        allow update: if incomingData().fields == existingData().fields
          && incomingData().metadata.sent == existingData().metadata.sent
          && incomingData().metadata.handled == true;

        allow delete: if false;

        function allowNewAnswers() {
          let circolare = get(/databases/$(database)/documents/circolari/$(circolareId)).data;

          return circolare.settings.allowNewAnswers == true
            || !("settings" in circolare)
            || !("allowNewAnswers" in circolare.settings);
        }
      }
    }
  }

  function existingData() {
    return resource.data;
  }

  function incomingData() {
    return request.resource.data;
  }

  function allowOnly(fields) {
    return incomingData().keys().size() == fields.size()
      && incomingData().keys().hasOnly(fields)
      && incomingData().keys().hasAll(fields);
  }
}